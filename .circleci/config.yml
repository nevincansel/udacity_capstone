version: 2.1

orbs:
  aws-eks: circleci/aws-eks@1.0.3
  kubernetes: circleci/kubernetes@0.11.2


executors:
  python:
    docker:
      - image: circleci/python:3.7.3-stretch
  aws:
    docker:
      - image: amazon/aws-cli


jobs:
  lint:
    executor: python
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            sudo wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            sudo chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint 

  build:
    machine: true
    working_directory: ~/app
    steps:
      - checkout
      - run:
          name: Build, tag and push docker image to docker.io
          command: |
            docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PWD}
            docker build -t nevincansel/udacitycapstone:${CIRCLE_WORKFLOW_ID:0:7} .
            docker push nevincansel/udacitycapstone:${CIRCLE_WORKFLOW_ID:0:7}
            docker tag nevincansel/udacitycapstone:${CIRCLE_WORKFLOW_ID:0:7} nevincansel/udacitycapstone:latest
            docker push nevincansel/udacitycapstone:latest

  create-deployment:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          udacitycapstone
        type: string
    steps:
      - checkout
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: deployment.yml
          resource-name: deployment/udacitycapstone

  test-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          udacitycapstone
        type: string
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          name: Test cluster
          command: |
            kubectl get svc
            kubectl get nodes
            kubectl get deployment


workflows:
  capstone:
    jobs:
      - lint
      - build:
          requires:
            - lint
      - aws-eks/create-cluster:
          cluster-name: udacitycapstone
      - create-deployment:
          cluster-name: udacitycapstone
          requires:
            - aws-eks/create-cluster
      - aws-eks/update-container-image:
          cluster-name: udacitycapstone
          resource-name: "deployment/udacitycapstone"
          container-image-updates: "nevincansel/udacitycapstone"
          get-rollout-status: true
          resource-file-path: deployment.yml
          record: true
          post-steps:
            - kubernetes/delete-resource:
                resource-types: "deployments"
                resource-names: "udacitycapstone"
                now: true
                wait: true
          #requires:
           #   - create-deployment
      - test-cluster:
          cluster-name: udacitycapstone
          requires:
            - aws-eks/update-container-image
      - aws-eks/delete-cluster:
          cluster-name: udacitycapstone
          requires:
            - test-cluster